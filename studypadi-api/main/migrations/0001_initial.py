# Generated by Django 5.1.2 on 2024-11-09 22:18

import django.db.models.deletion
import main.models
from django.conf import settings
from django.db import migrations, models

# pre filled daa

def create_initial_data(apps, schema_editor):
    module = apps.get_model("main", "Module")

    #modules
    m_h = f"""Study of human health, disease prevention, and medical treatment, encompassing clinical practice, \
public health, anatomy, physiology, pharmacology, and healthcare systems. Includes specialties like nursing, \
dentistry, and veterinary science."""
    s_t = f"""Exploration of natural and physical sciences including biology, chemistry, physics, and their \
technological applications. Covers scientific research methods, laboratory techniques, and emerging \
technologies in fields like biotechnology and materials science."""
    e = f"""Application of scientific and mathematical principles to design, build, and optimize solutions \
to technical challenges. Includes mechanical, electrical, civil, and chemical engineering, focusing on \
infrastructure, machines, processes, and systems."""
    ss_h = f"""Study of human society, behavior, culture, and creative expression. Encompasses psychology, \
sociology, anthropology, history, philosophy, and religious studies. Examines how people interact, communicate, \
and develop social structures."""
    b_m = f"""Study of organizational operations, strategy, and leadership in commercial and non-profit contexts. \
Covers finance, marketing, operations, human resources, entrepreneurship, and strategic planning for organizational success."""
    a_l = f"""Creative and analytical study of human artistic expression through visual arts, music, theater, dance, \
and written works. Includes art history, creative writing, literary analysis, and performing arts."""
    i_t = f"""Study of computing systems, software development, data management, and digital networks. \
Focuses on designing, implementing, and maintaining technology solutions for business and society, \
including cybersecurity, artificial intelligence, and cloud computing."""
    l_l = f"""Acquisition and mastery of languages through study of grammar, vocabulary, pronunciation, \
and cultural context. Includes both theoretical linguistics and practical communication skills in foreign languages."""
    
    module.objects.update_or_create(pk=1, defaults={"title": "Medicine & Health Sciences", "description": m_h})
    module.objects.update_or_create(pk=2, defaults={"title": "Science & Technology", "description": s_t})
    module.objects.update_or_create(pk=3, defaults={"title": "Engineering", "description": e})
    module.objects.update_or_create(pk=4, defaults={"title": "Social Sciences & Humanities", "description": ss_h})
    module.objects.update_or_create(pk=5, defaults={"title": "Business & Management", "description": b_m})
    module.objects.update_or_create(pk=6, defaults={"title": "Arts & Literature", "description": a_l})
    module.objects.update_or_create(pk=7, defaults={"title": "Information Technology", "description": i_t})
    module.objects.update_or_create(pk=8, defaults={"title": "Language Learning", "description": l_l})


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('difficulty', models.CharField(choices=[('EAS', 'Easy'), ('MED', 'Medium'), ('HRD', 'Hard')], default='EAS', max_length=3)),
                ('question', models.TextField()),
                ('created_by', models.OneToOneField(default=main.models.get_super_user, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('module_id', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.module')),
            ],
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_answer', models.BooleanField(default=False)),
                ('option', models.TextField()),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.question')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('quiz_type', models.CharField(choices=[('AIG', 'AI Generated quiz'), ('EDQ', 'Educator quiz'), ('PAQ', 'Past question quiz')], max_length=3)),
                ('num_of_questions', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(default=main.models.get_super_user, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('module_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.module')),
                ('questions', models.ManyToManyField(to='main.question')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz_attempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('time_taken', models.DateTimeField(auto_now_add=True)),
                ('quiz_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.quiz')),
                ('taken_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['time_taken'],
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chosen_option', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.option')),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.question')),
                ('quiz_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.quiz_attempt')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(default=main.models.get_super_user, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='quiz',
            name='section_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.section'),
        ),
        migrations.AddField(
            model_name='question',
            name='section_id',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.section'),
        ),
        migrations.CreateModel(
            name='Submodule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(default=main.models.get_super_user, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('module_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.module')),
            ],
        ),
        migrations.AddField(
            model_name='section',
            name='submodule_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.submodule'),
        ),
        migrations.AddField(
            model_name='quiz',
            name='submodule_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.submodule'),
        ),
        migrations.AddField(
            model_name='question',
            name='submodule_id',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.submodule'),
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(default=main.models.get_super_user, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('section_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='main.section')),
            ],
        ),
        migrations.AddField(
            model_name='quiz',
            name='topic_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.topic'),
        ),
        migrations.AddField(
            model_name='question',
            name='topic_id',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.topic'),
        ),
        migrations.RunPython(create_initial_data),
    ]
